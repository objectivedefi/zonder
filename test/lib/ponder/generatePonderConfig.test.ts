import { describe, expect, it } from 'vitest';

import { generatePonderConfig } from '../../../src/lib/ponder/generatePonderConfig.js';

describe('generatePonderConfig', () => {
  it('should generate ponder config with correct auto-generated comment', () => {
    const configContent = generatePonderConfig();

    // Check auto-generated comment
    expect(configContent).toContain(
      '// This file is auto-generated by zonder. Do not edit manually.',
    );
  });

  it('should import zonderConfig from zonder.config', () => {
    const configContent = generatePonderConfig();

    // Check import statement
    expect(configContent).toContain('import { zonderConfig } from "./zonder.config";');
  });

  it('should export default zonderConfig.toPonder()', () => {
    const configContent = generatePonderConfig();

    // Check export statement
    expect(configContent).toContain('export default zonderConfig.toPonder();');
  });

  it('should have proper structure and formatting', () => {
    const configContent = generatePonderConfig();

    const lines = configContent.split('\n');

    // Should have exactly 5 lines (comment, import, empty, export, final empty from trailing newline)
    expect(lines).toHaveLength(5);
    expect(lines[0]).toBe('// This file is auto-generated by zonder. Do not edit manually.');
    expect(lines[1]).toBe('import { zonderConfig } from "./zonder.config";');
    expect(lines[2]).toBe('');
    expect(lines[3]).toBe('export default zonderConfig.toPonder();');
    expect(lines[4]).toBe(''); // Trailing newline creates empty final line
  });

  it('should be deterministic', () => {
    const content1 = generatePonderConfig();
    const content2 = generatePonderConfig();

    expect(content1).toBe(content2);
  });
});
