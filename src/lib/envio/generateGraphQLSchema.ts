import type { Abi } from 'viem';

import { safeWriteFileSync } from '../utils/safeWrite.js';
import { validateEventParameters } from '../utils/validateEventParameters.js';
import type { ZonderConfig } from '../zonder/types.js';
import { formatToSnakeCase } from './formatToSnakeCase.js';
import { solidityTypeToGraphQLType } from './solidityTypeToGraphQLType.js';

/**
 * Generates a GraphQL schema from Zonder configuration
 */
export function generateGraphQLSchema<
  TChains extends Record<string, any>,
  TContracts extends Record<string, Abi>,
>(config: ZonderConfig<TChains, TContracts>): string {
  let schema = '# This file is auto-generated by zonder. Do not edit manually.\n';

  // Process each contract
  Object.entries(config.contracts || {}).forEach(([contractName, abi]) => {
    const events = abi.filter((item) => item.type === 'event');

    events.forEach((event) => {
      const typeName = `${contractName}_${event.name}`;

      // Validate event parameters have names and check for anonymous events
      const isValidEvent = validateEventParameters(event, contractName);
      if (!isValidEvent) {
        return; // Skip anonymous events
      }

      // Generate indexes
      const indexes = [`@index(fields: ["chain_id", "block_timestamp"])`];

      // Add indexes for address fields
      if (event.inputs && event.inputs.length > 0) {
        event.inputs.forEach((input) => {
          if (input.type === 'address') {
            const fieldName = `evt_${formatToSnakeCase(input.name!)}`; // We've validated this exists above
            indexes.push(`@index(fields: ["chain_id", "${fieldName}"])`);
          }
        });
      }

      schema += `type ${typeName}\n  ${indexes.join('\n  ')} {\n`;
      schema += `  id: ID!
  chain_id: Int!
  tx_hash: String!
  block_number: BigInt!
  block_timestamp: BigInt!
  log_index: Int!
  log_address: String!\n`;

      // Add event-specific fields
      if (event.inputs && event.inputs.length > 0) {
        schema += '\n';
        event.inputs.forEach((input) => {
          const fieldName = `evt_${formatToSnakeCase(input.name!)}`; // We've validated this exists above
          const graphqlType = solidityTypeToGraphQLType(input.type);
          schema += `  ${fieldName}: ${graphqlType}!\n`;
        });
      }

      schema += '}\n\n';
    });
  });

  return schema.trim() + '\n';
}

/**
 * Generates and writes GraphQL schema to file
 */
export function generateAndWriteGraphQLSchema<
  TChains extends Record<string, any>,
  TContracts extends Record<string, Abi>,
>(config: ZonderConfig<TChains, TContracts>, overwrite = false) {
  const schemaContent = generateGraphQLSchema(config);
  safeWriteFileSync('schema.graphql', schemaContent, { overwrite });
}
